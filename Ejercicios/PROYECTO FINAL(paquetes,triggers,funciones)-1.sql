-- //PROYECTO FINAL//
---------------------
-- ///Paquete para FACTURAS (HEADER)///
CREATE OR REPLACE PACKAGE P_FACTURAS AS
PROCEDURE ALTA_Factura(ID FACTURAS.COD_FACTURA%Type, fecha FACTURAS.FECHA%Type, Descrip FACTURAS.DESCRIPCION%Type);
PROCEDURE BAJA_Factura(ID FACTURAS.COD_FACTURA%Type);
PROCEDURE MOD_Descripcion(ID FACTURAS.COD_FACTURA%Type, n_descrip FACTURAS.DESCRIPCION%Type);
PROCEDURE MOD_Fecha(ID FACTURAS.COD_FACTURA%Type, n_fecha FACTURAS.FECHA%Type);
FUNCTION NUM_Facturas(Fecha_Inicio DATE, Fecha_Fin DATE) RETURN NUMBER;
FUNCTION TOTAL_Facturas(ID IN FACTURAS.COD_FACTURA%Type) RETURN VARCHAR2;
END P_FACTURAS;

-- ///Paquete para FACTURAS (BODY)///
CREATE OR REPLACE PACKAGE BODY P_FACTURAS AS
--------------------------------------------
-- Funcion PRIVADA Verificar Factura Existente
FUNCTION Factura_Existente(ID FACTURAS.COD_FACTURA%Type) RETURN BOOLEAN IS CURSOR C1 IS SELECT COD_FACTURA FROM FACTURAS;
BEGIN
FOR i IN C1 LOOP
IF i.COD_FACTURA = ID THEN RETURN TRUE;
END IF;
END LOOP;
RETURN FALSE;
END Factura_Existente;
-- Procedimiento ALTA
PROCEDURE ALTA_Factura(ID FACTURAS.COD_FACTURA%Type, fecha FACTURAS.FECHA%Type, Descrip FACTURAS.DESCRIPCION%Type) 
IS duplicado EXCEPTION; PRAGMA EXCEPTION_INIT(duplicado,-20001); BEGIN
IF NOT Factura_Existente(ID) THEN
INSERT INTO FACTURAS VALUES(ID,fecha,Descrip);
commit;
ELSE RAISE duplicado;
END IF;
EXCEPTION
WHEN duplicado THEN RAISE_APPLICATION_ERROR(-20001, 'NO DEBEN IR CAMPOS DUPLICADOS');
WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE(' ERROR: INDEFINIDO '||' Codigo: '||SQLCODE||' Mensaje: '||SQLERRM); 
END ALTA_Factura;

-- Procedimiento BAJA
PROCEDURE BAJA_Factura(ID FACTURAS.COD_FACTURA%Type)
IS BEGIN
IF Factura_Existente(ID) = TRUE THEN
DELETE FROM FACTURAS WHERE COD_FACTURA = ID;
DELETE FROM LINEAS_FACTURA WHERE COD_FACTURA = ID;
commit;
ELSE RAISE_APPLICATION_ERROR(-20001, 'NO EXISTE LA FACTURA');
END IF;
END BAJA_Factura;

-- Procedimiento Modificar (DESCRIPCION)
PROCEDURE MOD_Descripcion(ID FACTURAS.COD_FACTURA%Type, n_descrip FACTURAS.DESCRIPCION%Type)
IS BEGIN
IF Factura_Existente(ID) = TRUE THEN
UPDATE FACTURAS SET DESCRIPCION = n_descrip  WHERE COD_FACTURA = ID;
commit;
ELSE RAISE_APPLICATION_ERROR(-20001, 'NO EXISTE LA FACTURA');
END IF;
END MOD_Descripcion;

-- Procedimiento Modificar (FECHA)
PROCEDURE MOD_Fecha(ID FACTURAS.COD_FACTURA%Type, n_fecha FACTURAS.FECHA%Type)
IS BEGIN 
IF Factura_Existente(ID) = TRUE THEN
UPDATE FACTURAS SET FECHA = n_fecha WHERE COD_FACTURA = ID;
commit;
ELSE RAISE_APPLICATION_ERROR(-20001, 'NO EXISTE LA FACTURA');
END IF;
END MOD_Fecha;

-- Funcion Facturas (ENTRE FECHAS)
FUNCTION NUM_Facturas(Fecha_Inicio DATE, Fecha_Fin DATE) RETURN NUMBER
IS factura NUMBER; BEGIN
SELECT COUNT(*) INTO factura FROM FACTURAS WHERE FECHA >= Fecha_Inicio AND FECHA <= Fecha_Fin;
RETURN factura;
END NUM_Facturas;

-- Funcion TOTAL FACTURAS
FUNCTION TOTAL_Facturas(ID IN FACTURAS.COD_FACTURA%Type) RETURN VARCHAR2
IS total NUMBER; Cantidad NUMBER; Precio NUMBER; BEGIN
IF  Factura_Existente(ID) = TRUE THEN
SELECT PVP , UNIDADES INTO Precio, Cantidad FROM LINEAS_FACTURA WHERE COD_FACTURA = ID;
total := Precio * Cantidad;
Return 'Cantidad: '||Cantidad||' Precio: '||Precio||' Total: $'||total;
ELSE RAISE_APPLICATION_ERROR(-20001, 'NO EXISTE LA FACTURA');
END IF;
END TOTAL_Facturas;
-- ///FIN PAQUETE///
END P_FACTURAS;

-- ///Paquete Linea_Facturas (HEADER)///
CREATE OR REPLACE PACKAGE P_LINEA_FACTURAS AS
PROCEDURE ALTA_Linea(ID_F LINEAS_FACTURA.COD_FACTURA%Type, cod_prod LINEAS_FACTURA.COD_PRODUCTO%Type, cantidad LINEAS_FACTURA.UNIDADES%Type, Fecha LINEAS_FACTURA.FECHA%Type);
PROCEDURE BAJA_Linea(ID_F LINEAS_FACTURA.COD_FACTURA%Type, cod_prod LINEAS_FACTURA.COD_PRODUCTO%Type);
PROCEDURE MOD_Producto(ID_F LINEAS_FACTURA.COD_FACTURA%Type, cod_prod LINEAS_FACTURA.COD_PRODUCTO%Type, Fecha_n LINEAS_FACTURA.FECHA%Type);
PROCEDURE MOD_Producto(ID_F LINEAS_FACTURA.COD_FACTURA%Type, cod_prod LINEAS_FACTURA.COD_PRODUCTO%Type,  cantidad LINEAS_FACTURA.UNIDADES%Type);
FUNCTION NUM_Lineas(ID_F LINEAS_FACTURA.COD_FACTURA%Type) RETURN VARCHAR2;
END P_LINEA_FACTURAS;

-- ///Paquete Linea_Facturas (BODY)///
CREATE OR REPLACE PACKAGE BODY P_LINEA_FACTURAS AS

-- Funcion Privada(Verificar PRODUCTO)
FUNCTION Existe_Producto(cod_prod PRODUCTOS.COD_PRODUCTO%Type) RETURN NUMBER
IS Precio PRODUCTOS.PVP%Type; CURSOR C1 IS SELECT COD_PRODUCTO FROM PRODUCTOS; BEGIN
for i IN C1 LOOP
IF i.COD_PRODUCTO = cod_prod THEN SELECT PVP INTO Precio FROM PRODUCTOS WHERE COD_PRODUCTO = cod_prod; RETURN Precio;
END IF;
END LOOP;
RETURN 0;
EXCEPTION
WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR: "INDEFINIDO" Codigo: '||SQLCODE||' Mensaje: '||SQLERRM); 
END Existe_Producto;

-- Funcion Privada(Verificar FACTURA)
FUNCTION Existe_Factura(ID_F FACTURAS.COD_FACTURA%Type) RETURN BOOLEAN
IS CURSOR C2 IS SELECT COD_FACTURA FROM FACTURAS; BEGIN
for i IN C2 LOOP
IF i.COD_FACTURA = ID_F THEN RETURN TRUE;
END IF;
END LOOP;
RETURN FALSE;
END Existe_Factura;

-- Procedimiento ALTA Lineas_Factura
PROCEDURE ALTA_Linea(ID_F LINEAS_FACTURA.COD_FACTURA%Type, cod_prod LINEAS_FACTURA.COD_PRODUCTO%Type, cantidad LINEAS_FACTURA.UNIDADES%Type, Fecha LINEAS_FACTURA.FECHA%Type)
IS Precio PRODUCTOS.PVP%Type; BEGIN
IF NOT Existe_Factura(ID_F) THEN RAISE_APPLICATION_ERROR(-20001, ' NO EXISTE FACTURA DEL PRODUCTO!');
END IF;
IF Existe_Producto(cod_prod) > 0 THEN SELECT PVP INTO Precio FROM PRODUCTOS WHERE COD_PRODUCTO = cod_prod;
INSERT INTO LINEAS_FACTURA(COD_FACTURA,COD_PRODUCTO,PVP,UNIDADES,FECHA) VALUES(ID_F, cod_prod, Precio, cantidad, Fecha);
commit;
ELSE RAISE_APPLICATION_ERROR(-20001, ' NO EXISTE EL PRODUCTO!');
END IF;
END ALTA_Linea;

-- Procedimiento BAJA Lineas_Factura
PROCEDURE BAJA_Linea(ID_F LINEAS_FACTURA.COD_FACTURA%Type, cod_prod LINEAS_FACTURA.COD_PRODUCTO%Type)
IS BEGIN
IF NOT Existe_Factura(ID_F) THEN RAISE_APPLICATION_ERROR(-20001, ' NO EXISTE FACTURA DEL PRODUCTO!');
END IF;
IF Existe_Producto(cod_prod) > 0 THEN
DELETE FROM LINEAS_FACTURA WHERE COD_FACTURA = ID_F AND COD_PRODUCTO = cod_prod;
commit;
ELSE RAISE_APPLICATION_ERROR(-20001, ' NO EXISTE EL PRODUCTO!');
END IF;
END BAJA_Linea;

-- Modificar PRODUCTO (FECHA)
PROCEDURE MOD_Producto(ID_F LINEAS_FACTURA.COD_FACTURA%Type, cod_prod LINEAS_FACTURA.COD_PRODUCTO%Type, Fecha_n LINEAS_FACTURA.FECHA%Type)
IS BEGIN
IF NOT Existe_Factura(ID_F) THEN RAISE_APPLICATION_ERROR(-20001, ' NO EXISTE FACTURA DEL PRODUCTO!');
END IF;
IF Existe_Producto(cod_prod) > 0 THEN 
UPDATE LINEAS_FACTURA SET FECHA = Fecha_n WHERE COD_FACTURA = ID_F AND COD_PRODUCTO = cod_prod;
commit;
ELSE  RAISE_APPLICATION_ERROR(-20001, ' NO EXISTE EL PRODUCTO!');
END IF;
END MOD_Producto;

-- Modificar PRODUCTO(UNIDADES)
PROCEDURE MOD_Producto(ID_F LINEAS_FACTURA.COD_FACTURA%Type, cod_prod LINEAS_FACTURA.COD_PRODUCTO%Type,  cantidad LINEAS_FACTURA.UNIDADES%Type)
IS BEGIN
IF NOT Existe_Factura(ID_F) THEN RAISE_APPLICATION_ERROR(-20001, ' NO EXISTE FACTURA DEL PRODUCTO!');
END IF;
IF Existe_Producto(cod_prod) > 0 THEN
UPDATE LINEAS_FACTURA SET UNIDADES = cantidad WHERE  COD_FACTURA = ID_F AND COD_PRODUCTO = cod_prod;
commit;
ELSE   RAISE_APPLICATION_ERROR(-20001, ' NO EXISTE EL PRODUCTO!');
END IF;
END MOD_Producto;

-- Funcion NUMERO DE LINEAS
FUNCTION NUM_Lineas(ID_F LINEAS_FACTURA.COD_FACTURA%Type) RETURN VARCHAR2
IS Lineas NUMBER; BEGIN
IF NOT Existe_Factura(ID_F) THEN RAISE_APPLICATION_ERROR(-20001, ' NO EXISTE FACTURA DEL PRODUCTO!');
END IF;
SELECT COUNT(*) INTO Lineas FROM LINEAS_FACTURA WHERE COD_FACTURA = ID_F;
RETURN 'Factura: '||ID_F||' No. de Lineas: '||Lineas;
END NUM_Lineas; 
-- ///FIN PAQUETE///
END P_LINEA_FACTURAS;

-- TRIGGERS TIPO SENTENCIA (FACTURAS)
CREATE OR REPLACE TRIGGER T_FACTURAS
BEFORE INSERT OR DELETE OR UPDATE 
ON FACTURAS 
DECLARE
OPERACION CHAR(1);
BEGIN
IF INSERTING THEN
OPERACION := 'I';
END IF;
IF UPDATING THEN
OPERACION := 'U';
END IF;
IF  DELETING THEN
OPERACION := 'D';
END IF;
INSERT INTO CONTROL_LOG VALUES(USER,SYSDATE,'FACTURAS',OPERACION);
END T_FACTURAS;
-- TRIGGERS TIPO SENTENCIA (LINEAS_FACTURA)
CREATE OR REPLACE TRIGGER T_LINEAS_FACTURA
BEFORE INSERT OR DELETE OR UPDATE 
ON LINEAS_FACTURA 
DECLARE
OPERACION CHAR(1);
BEGIN
IF INSERTING THEN
OPERACION := 'I';
END IF;
IF UPDATING THEN
OPERACION := 'U';
END IF;
IF  DELETING THEN
OPERACION := 'D';
END IF;
INSERT INTO CONTROL_LOG VALUES(USER,SYSDATE,'LINEAS_FACTURA',OPERACION);
END T_LINEAS_FACTURA;

-- TRIGGERS TIPO FILA
CREATE OR REPLACE TRIGGER T_F_LINEAS_FACTURA
BEFORE INSERT OR DELETE OR UPDATE
ON LINEAS_FACTURA
FOR EACH ROW 
DECLARE total NUMBER; unidades_negativas EXCEPTION; PRAGMA EXCEPTION_INIT(unidades_negativas,-20001);
BEGIN
IF INSERTING THEN total := (:NEW.UNIDADES); UPDATE PRODUCTOS SET TOTAL_VENDIDOS = total WHERE COD_PRODUCTO = (:NEW.COD_PRODUCTO);
IF :NEW.UNIDADES <= 0 THEN RAISE unidades_negativas;
END IF;
END IF;
IF DELETING THEN total := (:OLD.UNIDADES); UPDATE PRODUCTOS SET TOTAL_VENDIDOS = TOTAL_VENDIDOS - total WHERE  COD_PRODUCTO = (:OLD.COD_PRODUCTO);
END IF;
IF UPDATING THEN 
IF (:OLD.UNIDADES > :NEW.UNIDADES) THEN total := ABS(:NEW.UNIDADES - :OLD.UNIDADES); UPDATE PRODUCTOS SET TOTAL_VENDIDOS = TOTAL_VENDIDOS - total WHERE COD_PRODUCTO = (:NEW.COD_PRODUCTO);
ELSE total := (:OLD.UNIDADES - :NEW.UNIDADES); UPDATE PRODUCTOS SET TOTAL_VENDIDOS = TOTAL_VENDIDOS + total WHERE COD_PRODUCTO  = (:NEW.COD_PRODUCTO);
END IF;
END IF;
EXCEPTION
WHEN unidades_negativas THEN
RAISE_APPLICATION_ERROR(-20001, 'Las unidades no pueden ser negativas: ' || :NEW.UNIDADES);
WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR: "INDEFINIDO" Codigo: '||SQLCODE||' Mensaje: '||SQLERRM); 
END T_F_LINEAS_FACTURA;

--Trigger Mejorado (LINEAS FACTURA)
CREATE OR REPLACE TRIGGER T_F_LINEAS_FACTURA
BEFORE INSERT OR DELETE OR UPDATE
ON LINEAS_FACTURA
FOR EACH ROW 
DECLARE
  total NUMBER;
  unidades_negativas EXCEPTION;
  PRAGMA EXCEPTION_INIT(unidades_negativas, -20001);
BEGIN
  IF INSERTING THEN
    total := :NEW.UNIDADES;
    UPDATE PRODUCTOS
    SET TOTAL_VENDIDOS = TOTAL_VENDIDOS + total
    WHERE COD_PRODUCTO = :NEW.COD_PRODUCTO;
    DBMS_OUTPUT.PUT_LINE('INSERT: ' || :NEW.COD_PRODUCTO || ' - Total Vendidos: ' || total);
    IF :NEW.UNIDADES <= 0 THEN
      RAISE unidades_negativas;
    END IF;
  END IF;

  IF DELETING THEN
    total := :OLD.UNIDADES;
    UPDATE PRODUCTOS
    SET TOTAL_VENDIDOS = TOTAL_VENDIDOS - total
    WHERE COD_PRODUCTO = :OLD.COD_PRODUCTO;
    DBMS_OUTPUT.PUT_LINE('DELETE: ' || :OLD.COD_PRODUCTO || ' - Total Vendidos: ' || total);
  END IF;

  IF UPDATING THEN
   IF :NEW.UNIDADES <= 0 THEN
      RAISE unidades_negativas;
    END IF;
    total := ABS(:NEW.UNIDADES - :OLD.UNIDADES);
    IF :OLD.UNIDADES > :NEW.UNIDADES THEN
      UPDATE PRODUCTOS
      SET TOTAL_VENDIDOS = TOTAL_VENDIDOS - total
      WHERE COD_PRODUCTO = :NEW.COD_PRODUCTO;
      DBMS_OUTPUT.PUT_LINE('UPDATE (decrease): ' || :NEW.COD_PRODUCTO || ' - Total Vendidos: ' || total);
    ELSE
      UPDATE PRODUCTOS
      SET TOTAL_VENDIDOS = TOTAL_VENDIDOS + total
      WHERE COD_PRODUCTO = :NEW.COD_PRODUCTO;
      DBMS_OUTPUT.PUT_LINE('UPDATE (increase): ' || :NEW.COD_PRODUCTO || ' - Total Vendidos: ' || total);
    END IF;
  END IF;

EXCEPTION
  WHEN unidades_negativas THEN
    RAISE_APPLICATION_ERROR(-20001, 'Las unidades no pueden ser negativas: ' || :NEW.UNIDADES);
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR: "INDEFINIDO" Codigo: ' || SQLCODE || ' Mensaje: ' || SQLERRM);
END T_F_LINEAS_FACTURA;


