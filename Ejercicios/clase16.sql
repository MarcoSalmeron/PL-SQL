-- Trigger Compound
CREATE OR REPLACE TRIGGER trigger1 FOR
  DELETE OR INSERT OR UPDATE ON REGIONS
COMPOUND TRIGGER
  BEFORE STATEMENT IS BEGIN
      INSERT INTO LOG_TABLE VALUES('BEFORE STATEMENT',USER);
  END BEFORE STATEMENT;
  
  AFTER STATEMENT IS BEGIN
    INSERT INTO LOG_TABLE VALUES('AFTER STATEMENT',USER);
  END AFTER STATEMENT;
  
  BEFORE EACH ROW IS BEGIN
    INSERT INTO LOG_TABLE VALUES('BEFORE EACH ROW',USER);
  END BEFORE EACH ROW;
  
  AFTER EACH ROW IS BEGIN
    INSERT INTO LOG_TABLE VALUES('AFTER EACH ROW',USER);
  END AFTER EACH ROW;
END trigger1;



-- PRUEBAs
INSERT INTO REGIONS VALUES(2000,'REGION2000');
COMMIT;

ALTER TRIGGER TR1_REGION DISABLE;

UPDATE REGIONS SET REGION_NAME = 'AAAAA';
COMMIT;


--Ejercicio 01
CREATE OR REPLACE TRIGGER t1 BEFORE
DELETE ON EMPLOYEES FOR EACH ROW
BEGIN
  IF :OLD.JOB_ID LIKE('%CLERK') THEN
    RAISE_APPLICATION_ERROR(-20320,'NO SE PUEDE ELIMINAR EL REGISTRO');
  END IF;
END;

--Ejercicio 02
CREATE OR REPLACE TRIGGER T2 BEFORE INSERT ON REGIONS
BEGIN
  INSERT INTO AUDITORIA(USUARIO,FECHA) VALUES(USER,SYSDATE);
END;

--EJERCICO 03
CREATE OR REPLACE TRIGGER T3 BEFORE UPDATE ON EMPLOYEES
FOR EACH ROW
BEGIN
  IF :NEW.SALARY < :OLD.SALARY THEN
    RAISE_APPLICATION_ERROR(-20000,'NO SE PUEDE BAJAR EL SALARIO');
  END IF;
  IF :NEW.SALARY > :OLD.SALARY THEN
    INSERT INTO AUDITORIA VALUES(USER,SYSDATE,:OLD.SALARY,:NEW.SALARY);
  END IF;
END;

--EJERCICIO =$

CREATE OR REPLACE TRIGGER T4 BEFORE INSERT ON DEPARTMENTS
FOR EACH ROW
DECLARE
  n_dpto NUMBER;
BEGIN
  SELECT DEPARTMENT_ID INTO  n_dpto FROM DEPARTMENTS WHERE DEPARTMENT_ID=:NEW.DEPARTMENT_ID;
  RAISE_APPLICATION_ERROR(-20001,'EL DEPARTAMENTO YA EXISTE');
  
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      IF :NEW.LOCATION_ID IS NULL THEN
        :NEW.LOCATION_ID:=1700;
      END IF;
      IF :NEW.MANAGER_ID IS NULL THEN
        :NEW.MANAGER_ID:=200;
      END IF;
END;

-- ORIENTACION A OBJETOS
-- HEADER
CREATE OR REPLACE TYPE PRODUCTO AS OBJECT (
--ATRIBUTOS
codigo NUMBER,
nombre VARCHAR2(100),
precio NUMBER,

--METODOS
--SELF
MEMBER FUNCTION ver_producto RETURN VARCHAR,
MEMBER FUNCTION ver_precio RETURN NUMBER,
MEMBER PROCEDURE cambiar_precio(precio NUMBER),
MEMBER PROCEDURE mayus,
STATIC PROCEDURE auditoria,
CONSTRUCTOR FUNCTION PRODUCTO(n1 VARCHAR2) RETURN SELF AS RESULT
);

--DROP TYPE PRODUCTO;

--BODY
CREATE OR REPLACE TYPE BODY PRODUCTO AS
  MEMBER FUNCTION ver_producto RETURN VARCHAR AS
  BEGIN
    RETURN 'Codigo-->'||codigo||' Nombre-->'||nombre||' Precio-->'||precio;
  END ver_producto;

  MEMBER FUNCTION ver_precio RETURN NUMBER AS
  BEGIN
    return precio;
  END ver_precio;
  
  MEMBER PROCEDURE cambiar_precio(precio NUMBER) AS
  BEGIN
    self.precio:=precio;
  END cambiar_precio;
  
  MEMBER PROCEDURE mayus AS
  BEGIN
    nombre:=upper(nombre);
  END mayus;
  
  STATIC PROCEDURE auditoria AS
  BEGIN
    INSERT INTO AUDITORIA VALUES(USER, SYSDATE);
  END auditoria;
  
  CONSTRUCTOR FUNCTION PRODUCTO(n1 VARCHAR2) RETURN SELF AS RESULT IS
    BEGIN
      SELF.nombre := n1;
      SELF.precio := NULL;
      SELF.codigo := SEQ1.NEXTVAL;
      RETURN;
    END;
END;


-- PRUEBAS

INSERT INTO REGIONS VALUES(20,'PRUEBA');
COMMIT;

UPDATE EMPLOYEES SET SALARY=15000 WHERE EMPLOYEE_ID=201;
COMMIT;

INSERT INTO DEPARTMENTS(department_id, department_name) VALUES(5,'RH');
COMMIT;

SET SERVEROUTPUT ON FORMAT WRAPPED LINE 1000;

DECLARE
  V1 PRODUCTO;
BEGIN
  V1:=PRODUCTO(100,'Manzanas',10);
  dbms_output.put_line(V1.ver_precio());
  dbms_output.put_line(V1.ver_producto());
  V1.cambiar_precio(11);
  dbms_output.put_line(V1.ver_precio());
  v1.mayus();
  dbms_output.put_line(V1.ver_producto());
  V1.nombre:='Pera';
  dbms_output.put_line(V1.ver_producto());
  PRODUCTO.auditoria();
  
END;


-- MODIFICAR AUDITORIA
DROP TABLE AUDITORIA;

CREATE TABLE AUDITORIA(
USUARIO VARCHAR2(100),
FECHA DATE
);

SELECT * FROM AUDITORIA;

DROP SEQUENCE SEQ1;

CREATE SEQUENCE SEQ1;


SET SERVEROUTPUT ON FORMAT WRAPPED LINE 1000;

DECLARE
  V1 PRODUCTO;
BEGIN
  V1:=PRODUCTO('Manzanas');
  dbms_output.put_line(V1.ver_precio());
  dbms_output.put_line(V1.ver_producto());
  V1.cambiar_precio(11);
  dbms_output.put_line(V1.ver_precio());
  v1.mayus();
  dbms_output.put_line(V1.ver_producto());
  V1.nombre:='Pera';
  dbms_output.put_line(V1.ver_producto());
  PRODUCTO.auditoria();
  
END;

DESC PRODUCTO;
SELECT * FROM USER_TYPES;
SELECT TEXT FROM USER_SOURCE WHERE NAME='PRODUCTO';

































